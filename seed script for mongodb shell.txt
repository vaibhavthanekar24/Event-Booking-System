// MongoDB Seed Script
// Run this in MongoDB Compass Shell

// Clear existing collections (optional - uncomment if needed)
// db.tenants.drop()
// db.users.drop()
// db.events.drop()
// db.bookings.drop()

// Create tenants
const tenant1Id = ObjectId();
const tenant2Id = ObjectId();

db.tenants.insertMany([
  {
    _id: tenant1Id,
    name: 'TechConf Inc.',
    createdAt: new Date()
  },
  {
    _id: tenant2Id,
    name: 'MusicFest LLC',
    createdAt: new Date()
  }
]);

// Create admin users
const admin1Id = ObjectId();
const admin2Id = ObjectId();

// Create organizer users
const organizer1Id = ObjectId();
const organizer2Id = ObjectId();

// Create attendee users for tenant 1
const attendees1Ids = [];
for (let i = 0; i < 10; i++) {
  attendees1Ids.push(ObjectId());
}

// Create attendee users for tenant 2
const attendees2Ids = [];
for (let i = 0; i < 10; i++) {
  attendees2Ids.push(ObjectId());
}

// Insert all users
db.users.insertMany([
  // Admins
  {
    _id: admin1Id,
    email: 'admin1@techconf.com',
    name: 'Admin TechConf',
    // Note: In a real scenario, passwords should be hashed
    // This is a simplified version for demonstration
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'admin',
    tenant: tenant1Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: admin2Id,
    email: 'admin2@musicfest.com',
    name: 'Admin MusicFest',
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'admin',
    tenant: tenant2Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  // Organizers
  {
    _id: organizer1Id,
    email: 'organizer1@techconf.com',
    name: 'Organizer TechConf',
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'organizer',
    tenant: tenant1Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: organizer2Id,
    email: 'organizer2@musicfest.com',
    name: 'Organizer MusicFest',
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'organizer',
    tenant: tenant2Id,
    createdAt: new Date(),
    updatedAt: new Date()
  }
]);

// Insert attendees for tenant 1
let attendeeBulkOps = [];
for (let i = 0; i < 10; i++) {
  attendeeBulkOps.push({
    _id: attendees1Ids[i],
    email: `attendee${i+1}@techconf.com`,
    name: `Attendee ${i+1} TechConf`,
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'attendee',
    tenant: tenant1Id,
    createdAt: new Date(),
    updatedAt: new Date()
  });
}

// Insert attendees for tenant 2
for (let i = 0; i < 10; i++) {
  attendeeBulkOps.push({
    _id: attendees2Ids[i],
    email: `attendee${i+1}@musicfest.com`,
    name: `Attendee ${i+1} MusicFest`,
    password: '$2a$10$xRnRJIXgxOvOdYGzWuQqCeGpn92k5HA1EhZHDKQUWP/ZRvPtdJFQK', // 'password123' hashed
    role: 'attendee',
    tenant: tenant2Id,
    createdAt: new Date(),
    updatedAt: new Date()
  });
}

db.users.insertMany(attendeeBulkOps);

// Create events
const event1Id = ObjectId();
const event2Id = ObjectId();
const event3Id = ObjectId();
const event4Id = ObjectId();

db.events.insertMany([
  // Tenant 1 events
  {
    _id: event1Id,
    title: 'Web Development Workshop',
    description: [
      {
        children: [
          {
            text: 'Learn the latest web development techniques and tools.'
          }
        ]
      }
    ],
    date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
    capacity: 5,
    organizer: organizer1Id,
    tenant: tenant1Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: event2Id,
    title: 'AI and Machine Learning Conference',
    description: [
      {
        children: [
          {
            text: 'Explore the cutting-edge advancements in AI and machine learning.'
          }
        ]
      }
    ],
    date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days from now
    capacity: 3,
    organizer: organizer1Id,
    tenant: tenant1Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  // Tenant 2 events
  {
    _id: event3Id,
    title: 'Rock Concert',
    description: [
      {
        children: [
          {
            text: 'An amazing rock concert featuring top bands.'
          }
        ]
      }
    ],
    date: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days from now
    capacity: 5,
    organizer: organizer2Id,
    tenant: tenant2Id,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: event4Id,
    title: 'Jazz Festival',
    description: [
      {
        children: [
          {
            text: 'A celebration of jazz music with renowned artists.'
          }
        ]
      }
    ],
    date: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 21 days from now
    capacity: 3,
    organizer: organizer2Id,
    tenant: tenant2Id,
    createdAt: new Date(),
    updatedAt: new Date()
  }
]);

// Create bookings
let bookingBulkOps = [];

// Event 1 - 5 confirmed bookings (full capacity)
for (let i = 0; i < 5; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event1Id,
    user: attendees1Ids[i],
    status: 'confirmed',
    tenant: tenant1Id,
    createdAt: new Date()
  });
}

// Event 1 - 3 waitlisted bookings
for (let i = 5; i < 8; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event1Id,
    user: attendees1Ids[i],
    status: 'waitlisted',
    tenant: tenant1Id,
    createdAt: new Date()
  });
}

// Event 2 - 2 confirmed bookings
for (let i = 8; i < 10; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event2Id,
    user: attendees1Ids[i],
    status: 'confirmed',
    tenant: tenant1Id,
    createdAt: new Date()
  });
}

// Event 3 - 4 confirmed bookings
for (let i = 0; i < 4; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event3Id,
    user: attendees2Ids[i],
    status: 'confirmed',
    tenant: tenant2Id,
    createdAt: new Date()
  });
}

// Event 4 - 3 confirmed bookings (full capacity)
for (let i = 4; i < 7; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event4Id,
    user: attendees2Ids[i],
    status: 'confirmed',
    tenant: tenant2Id,
    createdAt: new Date()
  });
}

// Event 4 - 2 waitlisted bookings
for (let i = 7; i < 9; i++) {
  bookingBulkOps.push({
    _id: ObjectId(),
    event: event4Id,
    user: attendees2Ids[i],
    status: 'waitlisted',
    tenant: tenant2Id,
    createdAt: new Date()
  });
}

db.bookings.insertMany(bookingBulkOps);

// Verify data was inserted
print('Tenants:', db.tenants.countDocuments());
print('Users:', db.users.countDocuments());
print('Events:', db.events.countDocuments());
print('Bookings:', db.bookings.countDocuments());

print('Seed completed successfully!');